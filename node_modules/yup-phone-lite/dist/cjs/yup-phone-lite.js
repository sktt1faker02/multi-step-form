"use strict";

var _libphonenumberJs = require("libphonenumber-js");
var Yup = _interopRequireWildcard(require("yup"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var YUP_PHONE_METHOD = "phone";
var isValidCountryCode = function isValidCountryCode(countryCode) {
  if (typeof countryCode !== "string") {
    return false;
  }
  return (0, _libphonenumberJs.isSupportedCountry)(countryCode);
};
Yup.addMethod(Yup.string, YUP_PHONE_METHOD, function yupPhoneLite(countryCode, errorMessage) {
  if (countryCode === void 0) {
    countryCode = "US";
  }
  var countryCodes = typeof countryCode === "string" ? [countryCode] : [].concat(countryCode);
  var validCountryCodes = countryCodes.filter(isValidCountryCode);
  if (!validCountryCodes.length) {
    validCountryCodes = ["US"];
  }
  var errMsg = typeof errorMessage === "string" && errorMessage ? errorMessage : "${path} must be a valid phone number for region" + (validCountryCodes.length > 1 ? "s" : "") + " " + validCountryCodes.join(", ");
  return this.test(YUP_PHONE_METHOD, errMsg, function (value) {
    try {
      if (value === undefined || value === "") {
        return true;
      }
      var isValid = validCountryCodes.reduce(function (isValidAccum, validCountryCode) {
        var isValidPhone = (0, _libphonenumberJs.isValidPhoneNumber)(value, validCountryCode);
        return isValidAccum || isValidPhone;
      }, false);
      return isValid;
    } catch (_unused) {
      return false;
    }
  });
});
//# sourceMappingURL=yup-phone-lite.js.map