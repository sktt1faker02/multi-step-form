{"version":3,"file":"yup-phone-lite.js","names":["isValidPhoneNumber","isSupportedCountry","Yup","YUP_PHONE_METHOD","isValidCountryCode","countryCode","addMethod","string","yupPhoneLite","errorMessage","countryCodes","validCountryCodes","filter","length","errMsg","join","test","value","undefined","isValid","reduce","isValidAccum","validCountryCode","isValidPhone"],"sources":["../../src/yup-phone-lite.ts"],"sourcesContent":["import { isValidPhoneNumber, isSupportedCountry } from \"libphonenumber-js\";\nimport * as Yup from \"yup\";\nimport type { CountryCode } from \"libphonenumber-js/types\";\n\ndeclare module \"yup\" {\n  export interface StringSchema {\n    /**\n     * Check for phone number validity.\n     *\n     * @param countryCode - The country code to check against (default: `\"US\"`)\n     * @param errorMessage - The error message to return if validation fails\n     */\n    phone(\n      countryCode?: CountryCode | CountryCode[],\n      errorMessage?: string\n    ): StringSchema;\n  }\n}\n\nconst YUP_PHONE_METHOD = \"phone\";\n\nconst isValidCountryCode = (countryCode?: string): boolean => {\n  if (typeof countryCode !== \"string\") {\n    return false;\n  }\n\n  return isSupportedCountry(countryCode);\n};\n\nYup.addMethod(\n  Yup.string,\n  YUP_PHONE_METHOD,\n  function yupPhoneLite(\n    countryCode: CountryCode | CountryCode[] = \"US\",\n    errorMessage?: string\n  ) {\n    const countryCodes: CountryCode[] =\n      typeof countryCode === \"string\" ? [countryCode] : [...countryCode];\n\n    let validCountryCodes = countryCodes.filter(isValidCountryCode);\n\n    if (!validCountryCodes.length) {\n      validCountryCodes = [\"US\"];\n    }\n\n    const errMsg =\n      typeof errorMessage === \"string\" && errorMessage\n        ? errorMessage\n        : `\\${path} must be a valid phone number for region${\n            validCountryCodes.length > 1 ? \"s\" : \"\"\n          } ${validCountryCodes.join(\", \")}`;\n\n    return this.test(YUP_PHONE_METHOD, errMsg, (value?: string) => {\n      try {\n        if (value === undefined || value === \"\") {\n          return true;\n        }\n\n        const isValid = validCountryCodes.reduce(\n          (isValidAccum, validCountryCode) => {\n            const isValidPhone = isValidPhoneNumber(value, validCountryCode);\n\n            return isValidAccum || isValidPhone;\n          },\n          false\n        );\n        return isValid;\n      } catch {\n        return false;\n      }\n    });\n  }\n);\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,kBAAkB,QAAQ,mBAAmB;AAC1E,OAAO,KAAKC,GAAG,MAAM,KAAK;AAkB1B,IAAMC,gBAAgB,GAAG,OAAO;AAEhC,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIC,WAAoB,EAAc;EAC5D,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;IACnC,OAAO,KAAK;EACd;EAEA,OAAOJ,kBAAkB,CAACI,WAAW,CAAC;AACxC,CAAC;AAEDH,GAAG,CAACI,SAAS,CACXJ,GAAG,CAACK,MAAM,EACVJ,gBAAgB,EAChB,SAASK,YAAY,CACnBH,WAAwC,EACxCI,YAAqB,EACrB;EAAA,IAFAJ,WAAwC;IAAxCA,WAAwC,GAAG,IAAI;EAAA;EAG/C,IAAMK,YAA2B,GAC/B,OAAOL,WAAW,KAAK,QAAQ,GAAG,CAACA,WAAW,CAAC,aAAOA,WAAW,CAAC;EAEpE,IAAIM,iBAAiB,GAAGD,YAAY,CAACE,MAAM,CAACR,kBAAkB,CAAC;EAE/D,IAAI,CAACO,iBAAiB,CAACE,MAAM,EAAE;IAC7BF,iBAAiB,GAAG,CAAC,IAAI,CAAC;EAC5B;EAEA,IAAMG,MAAM,GACV,OAAOL,YAAY,KAAK,QAAQ,IAAIA,YAAY,GAC5CA,YAAY,wDAEVE,iBAAiB,CAACE,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,UACrCF,iBAAiB,CAACI,IAAI,CAAC,IAAI,CAAG;EAExC,OAAO,IAAI,CAACC,IAAI,CAACb,gBAAgB,EAAEW,MAAM,EAAE,UAACG,KAAc,EAAK;IAC7D,IAAI;MACF,IAAIA,KAAK,KAAKC,SAAS,IAAID,KAAK,KAAK,EAAE,EAAE;QACvC,OAAO,IAAI;MACb;MAEA,IAAME,OAAO,GAAGR,iBAAiB,CAACS,MAAM,CACtC,UAACC,YAAY,EAAEC,gBAAgB,EAAK;QAClC,IAAMC,YAAY,GAAGvB,kBAAkB,CAACiB,KAAK,EAAEK,gBAAgB,CAAC;QAEhE,OAAOD,YAAY,IAAIE,YAAY;MACrC,CAAC,EACD,KAAK,CACN;MACD,OAAOJ,OAAO;IAChB,CAAC,CAAC,gBAAM;MACN,OAAO,KAAK;IACd;EACF,CAAC,CAAC;AACJ,CAAC,CACF"}